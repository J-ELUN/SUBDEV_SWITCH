###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        13/Jul/2017  14:23:16
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\demo\SUBDEV_SWITCH\Drivers\STM32L0xx_HAL_Driver\Src\stm32l0xx_hal_pwr.c
#    Command line =  
#        F:\demo\SUBDEV_SWITCH\Drivers\STM32L0xx_HAL_Driver\Src\stm32l0xx_hal_pwr.c
#        -D STM32L053xx -D USE_HAL_DRIVER -lc
#        F:\demo\SUBDEV_SWITCH\Projects\EWARM\SUBDEV_SWITCH\List\ -o
#        F:\demo\SUBDEV_SWITCH\Projects\EWARM\SUBDEV_SWITCH\Obj\ --debug
#        --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        F:\demo\SUBDEV_SWITCH\Projects\EWARM\..\..\Drivers\STM32L0xx_HAL_Driver\Inc\
#        -I F:\demo\SUBDEV_SWITCH\Projects\EWARM\..\Inc\ -I
#        F:\demo\SUBDEV_SWITCH\Projects\EWARM\..\..\Drivers\CMSIS\Device\ST\STM32L0xx\Include\
#        -I F:\demo\SUBDEV_SWITCH\Projects\EWARM\..\..\Drivers\CMSIS\Include\
#        -Ohz --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        F:\demo\SUBDEV_SWITCH\Projects\EWARM\SUBDEV_SWITCH\List\stm32l0xx_hal_pwr.lst
#    Object file  =  
#        F:\demo\SUBDEV_SWITCH\Projects\EWARM\SUBDEV_SWITCH\Obj\stm32l0xx_hal_pwr.o
#
###############################################################################

F:\demo\SUBDEV_SWITCH\Drivers\STM32L0xx_HAL_Driver\Src\stm32l0xx_hal_pwr.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l0xx_hal_pwr.c
      4            * @author  MCD Application Team
      5            * @version V1.1.0
      6            * @date    18-June-2014
      7            * @brief   PWR HAL module driver.
      8            *
      9            *          This file provides firmware functions to manage the following
     10            *          functionalities of the Power Controller (PWR) peripheral:
     11            *           + Initialization/de-initialization functions
     12            *           + Peripheral Control functions 
     13            *
     14            @verbatim
     15            ******************************************************************************
     16            * @attention
     17            *
     18            * <h2><center>&copy; COPYRIGHT(c) 2014 STMicroelectronics</center></h2>
     19            *
     20            * Redistribution and use in source and binary forms, with or without modification,
     21            * are permitted provided that the following conditions are met:
     22            *   1. Redistributions of source code must retain the above copyright notice,
     23            *      this list of conditions and the following disclaimer.
     24            *   2. Redistributions in binary form must reproduce the above copyright notice,
     25            *      this list of conditions and the following disclaimer in the documentation
     26            *      and/or other materials provided with the distribution.
     27            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     28            *      may be used to endorse or promote products derived from this software
     29            *      without specific prior written permission.
     30            *
     31            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     32            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     33            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     34            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     35            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     36            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     37            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     38            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     39            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     40            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     41            *
     42            ******************************************************************************
     43            */
     44          
     45          /* Includes ------------------------------------------------------------------*/
     46          #include "stm32l0xx_hal.h"
     47          
     48          /** @addtogroup STM32L0xx_HAL_Driver
     49            * @{
     50            */
     51          
     52          /** @defgroup PWR
     53            * @brief PWR HAL module driver
     54            * @{
     55            */
     56          
     57          #ifdef HAL_PWR_MODULE_ENABLED
     58          
     59          /* Private typedef -----------------------------------------------------------*/
     60          /* Private define ------------------------------------------------------------*/
     61          /* Private macro -------------------------------------------------------------*/
     62          /* Private variables ---------------------------------------------------------*/
     63          /* Private function prototypes -----------------------------------------------*/
     64          /* Private functions ---------------------------------------------------------*/
     65          
     66          /** @defgroup PWR_Private_Functions
     67            * @{
     68            */
     69          
     70          /** @defgroup PWR_Group1 Initialization and De-initialization functions 
     71            *  @brief Initialization and Configuration functions
     72            *
     73          @verbatim
     74           ===============================================================================
     75                        ##### Initialization and de-initialization functions #####
     76           ===============================================================================
     77              [..]
     78                After reset, the backup domain (RTC registers, RTC backup data
     79                registers) is protected against possible unwanted
     80                write accesses.
     81                To enable access to the RTC Domain and RTC registers, proceed as follows:
     82                  (+) Enable the Power Controller (PWR) APB1 interface clock using the
     83                      __PWR_CLK_ENABLE() macro.
     84                  (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
     85          
     86          @endverbatim
     87            * @{
     88            */
     89          
     90          /**
     91            * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
     92            * @param None
     93            * @retval None
     94            */
     95          void HAL_PWR_DeInit(void)
     96          {
     97            __PWR_FORCE_RESET();
     98            __PWR_RELEASE_RESET();
     99          }
    100          
    101          /**
    102            * @brief Enables access to the backup domain (RTC registers, RTC
    103            *         backup data registers ).
    104            * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
    105            *         Backup Domain Access should be kept enabled.
    106            * @param None
    107            * @retval None
    108            */
    109          void HAL_PWR_EnableBkUpAccess(void)
    110          {
    111            /* Enable access to RTC and backup registers */
    112            PWR->CR |= PWR_CR_DBP;
    113          }
    114          
    115          /**
    116            * @brief Disables access to the backup domain (RTC registers, RTC
    117            *         backup data registers).
    118            * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
    119            *         Backup Domain Access should be kept enabled.
    120            * @param None
    121            * @retval None
    122            */
    123          void HAL_PWR_DisableBkUpAccess(void)
    124          {
    125            /* Disable access to RTC and backup registers */
    126            PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_DBP);
    127          }
    128          
    129          /**
    130            * @}
    131            */
    132          
    133          /** @defgroup PWR_Group2 Peripheral Control functions 
    134            *  @brief Low Power modes configuration functions
    135            *
    136          @verbatim
    137          
    138           ===============================================================================
    139                           ##### Peripheral Control functions #####
    140           ===============================================================================
    141               
    142              *** PVD configuration ***
    143              =========================
    144              [..]
    145                (+) The PVD is used to monitor the VDD power supply by comparing it to a
    146                    threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
    147                (+) The PVD can use an external input analog voltage (PVD_IN) which is compared 
    148                internally to VREFINT. The PVD_IN (PB7) has to be configured in Analog mode 
    149                when PWR_PVDLevel_7 is selected (PLS[2:0] = 111).
    150          
    151                (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower
    152                    than the PVD threshold. This event is internally connected to the EXTI
    153                    line16 and can generate an interrupt if enabled. This is done through
    154                    __HAL_PVD_EXTI_ENABLE_IT() macro.
    155                (+) The PVD is stopped in Standby mode.
    156          
    157              *** WakeUp pin configuration ***
    158              ================================
    159              [..]
    160                (+) WakeUp pin is used to wake up the system from Standby mode. This pin is
    161                    forced in input pull-down configuration and is active on rising edges.
    162                (+) There are two WakeUp pins:
    163                    WakeUp Pin 1 on PA.00.
    164                    WakeUp Pin 2 on PC.13.
    165          
    166              [..]
    167              *** Main and Backup Regulators configuration ***
    168              ================================================
    169          
    170                (+) The main internal regulator can be configured to have a tradeoff between
    171                    performance and power consumption when the device does not operate at
    172                    the maximum frequency. This is done through __HAL_PWR_VOLTAGESCALING_CONFIG()
    173                    macro which configure VOS bit in PWR_CR register:
    174                  (++) When this bit is set (Regulator voltage output Scale 1 mode selected)
    175                       the System frequency can go up to 32 MHz.
    176                  (++) When this bit is reset (Regulator voltage output Scale 2 mode selected)
    177                       the System frequency can go up to 16 MHz.
    178                  (++) When this bit is reset (Regulator voltage output Scale 3 mode selected)
    179                       the System frequency can go up to 4.2 MHz.
    180                        
    181                  Refer to the datasheets for more details.
    182          
    183              *** Low Power modes configuration ***
    184              =====================================
    185               [..]
    186                The device features 5 low-power modes:
    187                (+) Low power run mode: regulator in low power mode, limited clock frequency, 
    188                  limited number of peripherals running.
    189                (+) Sleep mode: Cortex-M0+ core stopped, peripherals kept running.
    190                (+) Low power sleep mode: Cortex-M0+ core stopped, limited clock frequency, 
    191                   limited number of peripherals running, regulator in low power mode.
    192                (+) Stop mode: All clocks are stopped, regulator running, regulator in low power mode.
    193                (+) Standby mode: VCORE domain powered off
    194            
    195             *** Low power run mode ***
    196             =========================
    197              [..]
    198                 To further reduce the consumption when the system is in Run mode, the regulator can be
    199                  configured in low power mode. In this mode, the system frequency should not exceed
    200                  MSI frequency range1.
    201                  In Low power run mode, all I/O pins keep the same state as in Run mode.
    202            
    203                (+) Entry:
    204                  (++) VCORE in range2
    205                  (++) Decrease the system frequency tonot exceed the frequency of MSI frequency range1.
    206                  (++) The regulator is forced in low power mode using the HAL_PWREx_EnableLowPowerRunMode()
    207                       function.
    208                (+) Exit:
    209                  (++) The regulator is forced in Main regulator mode using the HAL_PWREx_DisableLowPowerRunMode()
    210                        function.
    211                  (++) Increase the system frequency if needed.
    212            
    213             *** Sleep mode ***
    214             ==================
    215              [..]
    216                (+) Entry:
    217                    The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFx)
    218                        functions with
    219                    (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
    220                    (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
    221               
    222                (+) Exit:
    223                  (++) Any peripheral interrupt acknowledged by the nested vectored interrupt
    224                        controller (NVIC) can wake up the device from Sleep mode.
    225          
    226             *** Low power sleep mode ***
    227             ============================
    228              [..]
    229                (+) Entry:
    230                    The Low power sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFx)
    231                        functions with
    232                    (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
    233                    (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
    234                 (+) The Flash memory can be switched off by using the control bits (SLEEP_PD in the FLASH_ACR register. 
    235                       This reduces power consumption but increases the wake-up time.
    236                   
    237                (+) Exit:
    238                  (++) If the WFI instruction was used to enter Low power sleep mode, any peripheral interrupt
    239                        acknowledged by the nested vectored interrupt controller (NVIC) can wake up the device
    240                        from Low power sleep mode. If the WFE instruction was used to enter Low power sleep mode,
    241                        the MCU exits Sleep mode as soon as an event occurs. 
    242                          
    243             *** Stop mode ***
    244             =================
    245              [..]
    246                The Stop mode is based on the Cortex-M0+ deepsleep mode combined with peripheral
    247                clock gating. The voltage regulator can be configured either in normal or low-power mode.
    248                In Stop mode, all clocks in the VCORE domain are stopped, the PLL, the MSI, the HSI and
    249                the HSE RC oscillators are disabled. Internal SRAM and register contents are preserved.
    250                To get the lowest consumption in Stop mode, the internal Flash memory also enters low
    251                power mode. When the Flash memory is in power-down mode, an additional startup delay is
    252                incurred when waking up from Stop mode.
    253                To minimize the consumption In Stop mode, VREFINT, the BOR, PVD, and temperature
    254                sensor can be switched off before entering Stop mode. They can be switched on again by
    255                software after exiting Stop mode using the ULP bit in the PWR_CR register.
    256                In Stop mode, all I/O pins keep the same state as in Run mode.
    257          
    258                (+) Entry:
    259                     The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI )
    260                       function with:
    261                    (++) Main regulator ON.
    262                    (++) Low Power regulator ON.
    263                    (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
    264                    (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
    265                (+) Exit:
    266                  (++) By issuing an interrupt or a wakeup event, the MSI or HSI16 RC
    267                       oscillator is selected as system clock depending the bit STOPWUCK in the RCC_CFGR
    268                       register
    269          
    270             *** Standby mode ***
    271             ====================
    272               [..]
    273                The Standby mode allows to achieve the lowest power consumption. It is based on the
    274                Cortex-M0+ deepsleep mode, with the voltage regulator disabled. The VCORE domain is
    275                consequently powered off. The PLL, the MSI, the HSI oscillator and the HSE oscillator are
    276                also switched off. SRAM and register contents are lost except for the RTC registers, RTC
    277                backup registers and Standby circuitry.
    278                
    279                To minimize the consumption In Standby mode, VREFINT, the BOR, PVD, and temperature
    280                 sensor can be switched off before entering the Standby mode. They can be switched 
    281                 on again by software after exiting the Standby mode.
    282                 function.
    283                
    284                (+) Entry:
    285                  (++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
    286                (+) Exit:
    287                  (++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
    288                       tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
    289          
    290             *** Auto-wakeup (AWU) from low-power mode ***
    291             =============================================
    292              [..]
    293                The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
    294                Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
    295                without depending on an external interrupt (Auto-wakeup mode).
    296          
    297              (+) RTC auto-wakeup (AWU) from the Stop mode
    298                  (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to:
    299                       (+++) Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
    300                             or Event modes) using the EXTI_Init() function.
    301                       (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
    302                       (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
    303                             and RTC_AlarmCmd() functions.
    304                  (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
    305                       is necessary to:
    306                       (+++) Configure the EXTI Line 19 to be sensitive to rising edges (Interrupt 
    307                             or Event modes) using the EXTI_Init() function.
    308                       (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
    309                             function.
    310                       (+++) Configure the RTC to detect the tamper or time stamp event using the
    311                             RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
    312                             functions.
    313                  (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
    314                       (+++) Configure the EXTI Line 20 to be sensitive to rising edges (Interrupt 
    315                             or Event modes) using the EXTI_Init() function.
    316                       (+++) Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function.
    317                       (+++) Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
    318                             RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
    319          
    320              (+) RTC auto-wakeup (AWU) from the Standby mode
    321                  (++) To wake up from the Standby mode with an RTC alarm event, it is necessary to:
    322                       (+++) Enable the RTC Alarm Interrupt using the RTC_ITConfig() function.
    323                       (+++) Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
    324                             and RTC_AlarmCmd() functions.
    325                  (++) To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
    326                       is necessary to:
    327                       (+++) Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
    328                             function.
    329                       (+++) Configure the RTC to detect the tamper or time stamp event using the
    330                             RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
    331                             functions.
    332                  (++) To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
    333                       (+++) Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
    334                       (+++) Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
    335                             RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
    336          
    337              (+) Comparator auto-wakeup (AWU) from the Stop mode
    338                  (++) To wake up from the Stop mode with an comparator 1 or comparator 2 wakeup
    339                       event, it is necessary to:
    340                       (+++) Configure the EXTI Line 21 for comparator 1 or EXTI Line 22 for comparator 2 
    341                             to be sensitive to to the selected edges (falling, rising or falling 
    342                             and rising) (Interrupt or Event modes) using the EXTI_Init() function.
    343                       (+++) Configure the comparator to generate the event.      
    344                  
    345          @endverbatim
    346            * @{
    347            */
    348          
    349          /**
    350            * @brief Configures the voltage threshold detected by the Power Voltage Detector(PVD).
    351            * @param sConfigPVD: pointer to an PWR_PVDTypeDef structure that contains the configuration
    352            *        information for the PVD.
    353            * @note Refer to the electrical characteristics of your device datasheet for
    354            *         more details about the voltage threshold corresponding to each
    355            *         detection level.
    356            * @retval None
    357            */
    358          void HAL_PWR_PVDConfig(PWR_PVDTypeDef *sConfigPVD)
    359          {
    360           uint32_t tmpreg = 0;
    361          
    362            /* Check the parameters */
    363            assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
    364          
    365            tmpreg = PWR->CR;
    366          
    367            /* Clear PLS[7:5] bits */
    368            tmpreg &= ~ (uint32_t)PWR_CR_PLS;
    369          
    370            /* Set PLS[7:5] bits according to PVDLevel value */
    371            tmpreg |= sConfigPVD->PVDLevel;
    372          
    373            /* Store the new value */
    374            PWR->CR = tmpreg;
    375          
    376            /* Configure the EXTI 16 interrupt */
    377            if((sConfigPVD->Mode == PWR_MODE_IT_RISING_FALLING) ||\
    378               (sConfigPVD->Mode == PWR_MODE_IT_FALLING) ||\
    379               (sConfigPVD->Mode == PWR_MODE_IT_RISING)) 
    380            {
    381              __HAL_PVD_EXTI_ENABLE_IT(PWR_EXTI_LINE_PVD);
    382            }
    383            
    384            /* Clear the edge trigger  for the EXTI Line 16 (PVD) */
    385            EXTI->RTSR &= ~EXTI_RTSR_TR16;
    386            EXTI->FTSR &= ~EXTI_FTSR_TR16;
    387          
    388            /* Configure the rising edge */
    389            if((sConfigPVD->Mode == PWR_MODE_IT_RISING_FALLING) ||\
    390               (sConfigPVD->Mode == PWR_MODE_IT_RISING))
    391            {
    392              EXTI->RTSR |= PWR_EXTI_LINE_PVD;
    393            }
    394            /* Configure the falling edge */
    395            if((sConfigPVD->Mode == PWR_MODE_IT_RISING_FALLING) ||\
    396               (sConfigPVD->Mode == PWR_MODE_IT_FALLING))
    397            {
    398              EXTI->FTSR |= PWR_EXTI_LINE_PVD;
    399            }
    400          }
    401          
    402          /**
    403            * @brief Enables the Power Voltage Detector(PVD).
    404            * @param None
    405            * @retval None
    406            */
    407          void HAL_PWR_EnablePVD(void)
    408          {
    409            /* Enable the power voltage detector */
    410            PWR->CR |= PWR_CR_PVDE;
    411          }
    412          
    413          /**
    414            * @brief Disables the Power Voltage Detector(PVD).
    415            * @param None
    416            * @retval None
    417            */
    418          void HAL_PWR_DisablePVD(void)
    419          {
    420            /* Disable the power voltage detector */
    421            PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_PVDE);
    422          }
    423          
    424          /**
    425            * @brief Enables the WakeUp PINx functionality.
    426            * @param WakeUpPinx: Specifies the Power Wake-Up pin to enable.
    427            *         This parameter can be one of the following values:
    428            *           @arg PWR_WAKEUP_PIN1
    429            *           @arg PWR_WAKEUP_PIN2
    430            * @retval None
    431            */
    432          void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
    433          {
    434            /* Check the parameter */
    435            assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
    436            /* Enable the EWUPx pin */
    437            PWR->CSR |= WakeUpPinx;
    438          }
    439          
    440          /**
    441            * @brief Disables the WakeUp PINx functionality.
    442            * @param WakeUpPinx: Specifies the Power Wake-Up pin to disable.
    443            *         This parameter can be one of the following values:
    444            *           @arg PWR_WAKEUP_PIN1
    445            *           @arg PWR_WAKEUP_PIN2  
    446            * @retval None
    447            */
    448          void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
    449          {
    450            /* Check the parameter */
    451            assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
    452            /* Disable the EWUPx pin */
    453            PWR->CSR &= ~WakeUpPinx;
    454          }
    455          
    456          /**
    457            * @brief Enters Sleep mode.
    458            * @note In Sleep mode, all I/O pins keep the same state as in Run mode.
    459            * @param Regulator: Specifies the regulator state in SLEEP mode.
    460            *          This parameter can be one of the following values:
    461            *            @arg PWR_MAINREGULATOR_ON: SLEEP mode with regulator ON
    462            *            @arg PWR_LOWPOWERREGULATOR_ON: SLEEP mode with low power regulator ON
    463            * @param SLEEPEntry: Specifies if SLEEP mode is entered with WFI or WFE instruction.
    464            *           When WFI entry is used, tick interrupt have to be disabled if not desired as 
    465            *           the interrupt wake up source.
    466            *           This parameter can be one of the following values:
    467            *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
    468            *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
    469            * @retval None
    470            */
    471          void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
    472          {
    473             uint32_t tmpreg = 0;
    474            /* Check the parameters */
    475            assert_param(IS_PWR_REGULATOR(Regulator));
    476            assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
    477          
    478             /* Select the regulator state in Sleep mode ---------------------------------*/
    479            tmpreg = PWR->CR;
    480            /* Clear PDDS and LPDS bits */
    481            tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPSDSR);
    482          
    483           /* Set LPSDSR bit according to PWR_Regulator value */
    484            tmpreg |= Regulator;
    485          
    486            /* Store the new value */
    487            PWR->CR = tmpreg;
    488            
    489            /* Clear SLEEPDEEP bit of Cortex System Control Register */
    490            SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
    491          
    492            /* Select SLEEP mode entry -------------------------------------------------*/
    493            if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
    494            {
    495              /* Request Wait For Interrupt */
    496              __WFI();
    497            }
    498            else
    499            {
    500              /* Request Wait For Event */
    501              __SEV();
    502              __WFE();
    503              __WFE();
    504            }
    505          }
    506          
    507          /**
    508            * @brief Enters Stop mode. 
    509            * @note In Stop mode, all I/O pins keep the same state as in Run mode.
    510            * @note When exiting Stop mode by issuing an interrupt or a wakeup event,
    511            *        MSI or HSI16 RCoscillator is selected as system clock depending 
    512            *        the bit STOPWUCK in the RCC_CFGR register.
    513            * @note When the voltage regulator operates in low power mode, an additional
    514            *         startup delay is incurred when waking up from Stop mode. 
    515            *         By keeping the internal regulator ON during Stop mode, the consumption
    516            *         is higher although the startup time is reduced.    
    517            * @param Regulator: Specifies the regulator state in Stop mode.
    518            *          This parameter can be one of the following values:
    519            *            @arg PWR_MAINREGULATOR_ON: Stop mode with regulator ON
    520            *            @arg PWR_LOWPOWERREGULATOR_ON: Stop mode with low power regulator ON
    521            * @param STOPEntry: Specifies if Stop mode in entered with WFI or WFE instruction.
    522            *          This parameter can be one of the following values:
    523            *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
    524            *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
    525            * @retval None
    526            */
    527          void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
    528          {
    529            uint32_t tmpreg = 0;
    530          
    531            /* Check the parameters */
    532            assert_param(IS_PWR_REGULATOR(Regulator));
    533            assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    534          
    535            /* Select the regulator state in Stop mode ---------------------------------*/
    536            tmpreg = PWR->CR;
    537            /* Clear PDDS and LPDS bits */
    538            tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPSDSR);
    539          
    540           /* Set LPSDSR bit according to PWR_Regulator value */
    541            tmpreg |= Regulator;
    542          
    543            /* Store the new value */
    544            PWR->CR = tmpreg;
    545          
    546            /* Set SLEEPDEEP bit of Cortex System Control Register */
    547            SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    548          
    549            /* Select Stop mode entry --------------------------------------------------*/
    550            if(STOPEntry == PWR_STOPENTRY_WFI)
    551            {
    552              /* Request Wait For Interrupt */
    553              __WFI();
    554            }
    555            else
    556            {
    557              /* Request Wait For Event */
    558              __SEV();
    559              __WFE();
    560              __WFE();
    561            }
    562           
    563            /* Reset SLEEPDEEP bit of Cortex System Control Register */
    564            SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
    565          }
    566          
    567          /**
    568            * @brief Enters Standby mode.
    569            * @note In Standby mode, all I/O pins are high impedance except for:
    570            *          - Reset pad (still available) 
    571            *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC
    572            *            Alarm out, or RTC clock calibration out.
    573            *          - RTC_AF2 pin (PC13) if configured for tamper.
    574            *          - WKUP pin 1 (PA0) if enabled.
    575            *          - WKUP pin 2 (PC13) if enabled.
    576            * @param None
    577            * @retval None
    578            */
    579          void HAL_PWR_EnterSTANDBYMode(void)
    580          {
    581            /* Select Standby mode */
    582            PWR->CR |= PWR_CR_PDDS;
    583          
    584            /* Set SLEEPDEEP bit of Cortex System Control Register */
    585            SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
    586          
    587            /* This option is used to ensure that store operations are completed */
    588          #if defined ( __CC_ARM)
    589            __force_stores();
    590          #endif
    591            /* Request Wait For Interrupt */
    592            __WFI();
    593          }
    594          
    595          /**
    596            * @brief This function handles the PWR PVD interrupt request.
    597            * @note This API should be called under the PVD_IRQHandler().
    598            * @param None
    599            * @retval None
    600            */
    601          void HAL_PWR_PVD_IRQHandler(void)
    602          {
    603            /* Check PWR exti flag */
    604            if(__HAL_PVD_EXTI_GET_FLAG(PWR_EXTI_LINE_PVD) != RESET)
    605            {
    606              /* PWR PVD interrupt user callback */
    607              HAL_PWR_PVDCallback();
    608          
    609              /* Clear PWR Exti pending bit */
    610              __HAL_PVD_EXTI_CLEAR_FLAG(PWR_EXTI_LINE_PVD);
    611            }
    612          }
    613          
    614          /**
    615            * @brief  PWR PVD interrupt callback
    616            * @param  None 
    617            * @retval None
    618            */
    619          __weak void HAL_PWR_PVDCallback(void)
    620          {
    621            /* NOTE : This function Should not be modified, when the callback is needed,
    622                      the HAL_PWR_PVDCallback could be implemented in the user file
    623             */ 
    624          }
    625          
    626          /**
    627            * @}
    628            */
    629          
    630          /**
    631            * @}
    632            */
    633          
    634          #endif /* HAL_PWR_MODULE_ENABLED */
    635          /**
    636            * @}
    637            */
    638          
    639          /**
    640            * @}
    641            */
    642          
    643          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_PWR_DeInit
       0   HAL_PWR_DisableBkUpAccess
       0   HAL_PWR_DisablePVD
       0   HAL_PWR_DisableWakeUpPin
       0   HAL_PWR_EnableBkUpAccess
       0   HAL_PWR_EnablePVD
       0   HAL_PWR_EnableWakeUpPin
       8   HAL_PWR_EnterSLEEPMode
       0   HAL_PWR_EnterSTANDBYMode
       8   HAL_PWR_EnterSTOPMode
       0   HAL_PWR_PVDCallback
       8   HAL_PWR_PVDConfig
      16   HAL_PWR_PVD_IRQHandler
        16   -> HAL_PWR_PVDCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
      22  HAL_PWR_DeInit
      12  HAL_PWR_DisableBkUpAccess
      12  HAL_PWR_DisablePVD
      10  HAL_PWR_DisableWakeUpPin
      12  HAL_PWR_EnableBkUpAccess
      12  HAL_PWR_EnablePVD
      10  HAL_PWR_EnableWakeUpPin
      40  HAL_PWR_EnterSLEEPMode
      24  HAL_PWR_EnterSTANDBYMode
      48  HAL_PWR_EnterSTOPMode
       2  HAL_PWR_PVDCallback
      92  HAL_PWR_PVDConfig
      22  HAL_PWR_PVD_IRQHandler

 
 354 bytes in section .text
 
 354 bytes of CODE memory

Errors: none
Warnings: none
